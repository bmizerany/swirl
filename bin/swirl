#!/usr/bin/env ruby
require 'irb'
require 'yaml'
require 'swirl'
require 'optparse'

interactive = false
account = "default"
etc = "#{ENV["HOME"]}/.swirl"
region = 'us-east-1'

ARGV.options do |o|
  o.on("-a ACCOUT", "Account name (default is default)") {|s| account = s }
  o.on("-c FILE", "Swirl file (default is ~/.swirl)") {|s| etc = s }
  o.on("-r REGION", "Region (default is us-east-1)") {|s| region = s}
  o.on("-i", "Interactive console") { interactive = true }
  o.on("-h", "--help") { puts o; exit }
  o.parse!
end

config = \
if ENV["AWS_ACCESS_KEY_ID"] && ENV["AWS_SECRET_ACCESS_KEY"]
  {
    :aws_access_key_id => ENV["AWS_ACCESS_KEY_ID"],
    :aws_secret_access_key => ENV["AWS_SECRET_ACCESS_KEY"]
  }
else
  account = account.to_sym
  data = YAML.load_file(etc)
  if data.key?(account)
    data[account]
  else
    abort("I don't see the account you're looking for")
  end
end
config[:region] = region

c = Swirl::AWS.new(:ec2, config)

# We can now start the interactive session
# if requested
if interactive
  # Create sugar for working in the console.
  # >> c.call "DescribeInstances", ...
  Kernel.send(:define_method, :c) { c }

  # Start the interactive session
  IRB.start
else
  begin
    case cmd = ARGV[0] || "list"
    when "list"
      resvs = c.call("DescribeInstances")["reservationSet"]
      insts = resvs.map {|r| r["instancesSet"] }.flatten
      insts.each do |ins|
        data = [
            ins["instanceState"]["name"],
            ins["instanceId"],
            ins["availabilityZone"],
            ins["dnsName"],
            ins["privateDnsName"],
            ins["launchTime"]
        ]
        puts data * "\t"
      end
    end
  rescue => e
    $stderr.puts "! " + e.to_s
  end
end
